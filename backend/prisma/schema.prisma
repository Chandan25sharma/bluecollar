datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CLIENT
  PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

enum AdminRole {
  SUPER
  FINANCE
  KYC
  SUPPORT
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  phone     String   @unique
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clientProfile   ClientProfile?
  providerProfile ProviderProfile?
  adminProfile    AdminProfile?
}

model ClientProfile {
  id     String @id @default(uuid())
  name   String
  age    Int?
  user   User   @relation(fields: [userId], references: [id])
  userId String

  bookings Booking[]
  reviews  Review[]
}

model ProviderProfile {
  id        String @id @default(uuid())
  name      String
  skills    String[]
  rate      Float
  verified  Boolean @default(false)
  bankName  String?
  bankAcc   String?
  govIdUrl  String?
  user      User   @relation(fields: [userId], references: [id])
  userId    String

  services  Service[]
  bookings  Booking[]
  reviews   Review[]
  payouts   Payout[]
}

model AdminProfile {
  id        String    @id @default(uuid())
  role      AdminRole
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

model Service {
  id          String           @id @default(uuid())
  title       String
  description String
  price       Float
  createdAt   DateTime         @default(now())
  provider    ProviderProfile  @relation(fields: [providerId], references: [id])
  providerId  String

  bookings    Booking[]
}

model Booking {
  id         String          @id @default(uuid())
  status     BookingStatus   @default(PENDING)
  date       DateTime
  client     ClientProfile   @relation(fields: [clientId], references: [id])
  clientId   String
  provider   ProviderProfile @relation(fields: [providerId], references: [id])
  providerId String
  service    Service         @relation(fields: [serviceId], references: [id])
  serviceId  String

  review     Review?
  payment    Payment?
}

model Payment {
  id          String   @id @default(uuid())
  amount      Float
  commission  Float
  status      String
  booking     Booking  @relation(fields: [bookingId], references: [id])
  bookingId   String
  createdAt   DateTime @default(now())
}

model Review {
  id         String          @id @default(uuid())
  rating     Int
  comment    String?
  client     ClientProfile   @relation(fields: [clientId], references: [id])
  clientId   String
  provider   ProviderProfile @relation(fields: [providerId], references: [id])
  providerId String
  booking    Booking?        @relation(fields: [bookingId], references: [id])
  bookingId  String?
}

model Payout {
  id         String          @id @default(uuid())
  amount     Float
  status     String
  provider   ProviderProfile @relation(fields: [providerId], references: [id])
  providerId String
  createdAt  DateTime @default(now())
}
